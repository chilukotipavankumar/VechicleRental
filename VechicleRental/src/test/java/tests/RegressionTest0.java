import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    public void assertBooleanArrayEquals(boolean[] expectedArray, boolean[] actualArray) {
        if (expectedArray.length != actualArray.length) {
            throw new AssertionError("Array lengths differ: " + expectedArray.length + " != " + actualArray.length);
        }
        for (int i = 0; i < expectedArray.length; i++) {
            if (expectedArray[i] != actualArray[i]) {
                throw new AssertionError("Arrays differ at index " + i + ": " + expectedArray[i] + " != " + actualArray[i]);
            }
        }
    }

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("hi!", "", "hi!", (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "", "", (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("hi!", "", "hi!", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID  not found.", "", "Vehicle with ID hi! not found.", (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass7 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("hi!", "", "", (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass3 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "hi!", "hi!", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList4);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "", "", (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "Vehicle with ID hi! not found.", "", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass7 = vehicleList6.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID  not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass4 = vehicleList3.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "", "Vehicle with ID hi! not found.", (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID hi! not found.", "", "hi!", (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass4 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("hi!", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass3 = vehicleList2.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "", "", (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass7 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass5 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "", 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".", (int) (byte) 100);
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass5 = customerList4.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID hi! not found.", "No vehicles match the keyword \"Vehicle with ID  not found.\".", "", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass2 = vehicleList1.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.lang.Class<?> wildcardClass8 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", 10.0d);
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.", (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.lang.Class<?> wildcardClass4 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (short) 0);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) '4');
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        rentalSystem0.addCustomer("No vehicles match the keyword \"hi!\".", "hi!");
        rentalSystem0.addCustomer("Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", 0.0d);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "Vehicle with ID hi! not found.", 0);
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.lang.String str7 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found." + "'", str7, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", "", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("No vehicles match the keyword \"hi!\".");
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID No vehicles match the keyword \"hi!\". not found." + "'", str5, "Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(customerList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str10 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"\".", "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.");
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass5 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", "hi!", "", 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"\".");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (short) 0);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass5 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", "hi!", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", "No vehicles match the keyword \"hi!\".", "", (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass10 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str16 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.", (int) 'a');
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "", 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        java.lang.String str14 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.searchVehicle("");
        java.lang.Class<?> wildcardClass18 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str14, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"\"." + "'", str17, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.");
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", 0);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass10 = vehicleList9.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass15 = vehicleList14.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("No vehicles match the keyword \"\".", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 10);
        java.lang.Class<?> wildcardClass24 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        int int9 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        java.lang.String str14 = rentalSystem0.returnVehicle("Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str9 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (int) (byte) 1);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"\".", "Vehicle with ID  not found.", (double) 1L);
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found." + "'", str9, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList15);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID  not found.", (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("");
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".", (-1));
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.", "", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".", 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"\"." + "'", str7, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertNotNull(vehicleList8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList5 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(customerList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        java.lang.String str15 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (int) (byte) 10);
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass6 = vehicleList5.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass5 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", 1.0d);
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", (int) (short) -1);
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", (int) (byte) -1);
        java.lang.Class<?> wildcardClass18 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str7 = rentalSystem0.searchVehicle("");
        java.lang.Class<?> wildcardClass8 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"\"." + "'", str7, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        int int10 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("");
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass9 = vehicleList8.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"\"." + "'", str7, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertNotNull(vehicleList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".", 100.0d);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.", (int) (short) 1);
        java.lang.Class<?> wildcardClass20 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (int) (byte) 10);
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str19 = rentalSystem0.rentVehicle("", "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.", (int) (byte) 100);
        java.lang.String str21 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID  not found." + "'", str19, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\"." + "'", str21, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\".");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "", 0);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str16 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".", "No vehicles match the keyword \"\".", "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\"." + "'", str16, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass7 = vehicleList6.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        int int9 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        rentalSystem0.addCustomer("No vehicles match the keyword \"hi!\".", "hi!");
        java.lang.String str14 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\"." + "'", str14, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.", "", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (int) (byte) 10);
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass16 = vehicleList15.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.", "Vehicle with ID No vehicles match the keyword \"hi!\". not found.", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.");
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass10 = customerList9.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass4 = vehicleList3.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        java.lang.String str6 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.Class<?> wildcardClass7 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str6, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        java.lang.String str21 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.util.List<org.example.Customer> customerList22 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass23 = customerList22.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\"." + "'", str21, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".");
        org.junit.Assert.assertNotNull(customerList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\".", "", (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str16 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.", (int) 'a');
        java.lang.String str20 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", (int) (byte) -1);
        java.util.List<org.example.Customer> customerList21 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass22 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str10 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str10, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        java.lang.String str14 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass16 = vehicleList15.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str14, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        int int6 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID Vehicle with ID hi! not found. not found.", 100.0d);
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".");
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\"." + "'", str20, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.", "Vehicle with ID hi! not found.", (int) '#');
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", "Vehicle with ID hi! not found.", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList12);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID hi! not found.\".\"." + "'", str11, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID hi! not found.\".\".");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
        java.lang.Class<?> wildcardClass10 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) 100.0f);
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        int int12 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList13 = rentalSystem0.getVehicles();
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(vehicleList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "hi!", (int) (short) 100);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", "No vehicles match the keyword \"\".", (int) (byte) -1);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"\". not found.");
        java.lang.String str10 = rentalSystem0.searchVehicle("Vehicle with ID hi! not found.");
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"Vehicle with ID hi! not found.\"." + "'", str10, "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass15 = vehicleList14.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass7 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "", 0);
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str15 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".", (int) (short) 0);
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("No vehicles match the keyword \"hi!\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID No vehicles match the keyword \"hi!\". not found." + "'", str5, "Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str6 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        java.lang.String str10 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.", (int) (short) 0);
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found." + "'", str6, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass9 = vehicleList8.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "", 0);
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList12);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList12);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        java.lang.String str11 = rentalSystem0.returnVehicle("");
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID  not found." + "'", str11, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".", "hi!");
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        java.lang.String str14 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str14, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\"." + "'", str17, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".");
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "Vehicle with ID Vehicle with ID  not found. not found.", 100);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".", (int) (byte) 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", 0);
        int int15 = rentalSystem0.getAvailableVehicleCount();
        int int16 = rentalSystem0.getAvailableVehicleCount();
        int int17 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        java.lang.String str14 = rentalSystem0.searchVehicle("hi!");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.\".", "", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".", (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str14, "No vehicles match the keyword \"hi!\".");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        int int16 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str16 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", (double) 10.0f);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\"." + "'", str16, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\".", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n");
        java.lang.String str16 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.");
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList7 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(customerList7);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass7 = vehicleList6.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str12 = rentalSystem0.searchVehicle("");
        java.lang.String str16 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", 0);
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"\"." + "'", str12, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found. not found.", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID Vehicle with ID hi! not found. not found.", 100.0d);
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass18 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.searchVehicle("Vehicle with ID hi! not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"Vehicle with ID hi! not found.\"." + "'", str10, "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID hi! not found.");
        java.util.List<org.example.Customer> customerList8 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass9 = customerList8.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID hi! not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        org.junit.Assert.assertNotNull(customerList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        int int8 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (short) 0);
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass10 = customerList9.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (short) 0);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) 100.0f);
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found. not found.", "", 0);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found. not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found. not found. not found.");
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID Vehicle with ID hi! not found. not found.", 100.0d);
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList21 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".", "hi!", "", (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList21);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass11 = customerList10.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(customerList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"\".", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (int) (short) 10);
        java.lang.String str11 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        int int13 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"\". not found.");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.lang.String str4 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", (int) (byte) -1);
        java.lang.String str6 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str4, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.\"." + "'", str6, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.\".");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found.", (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList7 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass8 = customerList7.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(customerList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.lang.String str4 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", (int) (byte) -1);
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str4, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str5 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass10 = customerList9.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str5, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (int) (byte) 10);
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID  not found." + "'", str17, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\"." + "'", str20, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str12 = rentalSystem0.searchVehicle("");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        java.lang.String str17 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".");
        java.lang.String str19 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.");
        java.lang.Class<?> wildcardClass20 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"\"." + "'", str12, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\"." + "'", str19, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.lang.String str20 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".");
        java.util.List<org.example.Vehicle> vehicleList21 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\".", "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (double) '4');
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\"." + "'", str20, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\".");
        org.junit.Assert.assertNotNull(vehicleList21);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.String str14 = rentalSystem0.returnVehicle("");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID  not found." + "'", str14, "Vehicle with ID  not found.");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".", "Vehicle with ID hi! not found.");
        java.lang.String str12 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.");
        java.lang.Class<?> wildcardClass13 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\"." + "'", str12, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str7 = rentalSystem0.searchVehicle("");
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"\"." + "'", str7, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str14 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".", (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found.");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str10 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".");
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList11);
        org.junit.Assert.assertNotNull(vehicleList12);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str16 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        java.lang.String str20 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.", (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\"." + "'", str16, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\". not found." + "'", str20, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\". not found.");
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        java.lang.String str14 = rentalSystem0.rentVehicle("", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\". not found.", (int) 'a');
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID  not found." + "'", str14, "Vehicle with ID  not found.");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        java.lang.String str15 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"\". not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", (int) (short) -1);
        java.util.List<org.example.Customer> customerList16 = rentalSystem0.getCustomers();
        java.lang.String str20 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.", (int) (short) 10);
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("No vehicles match the keyword \"hi!\".");
        java.lang.String str7 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID No vehicles match the keyword \"hi!\". not found." + "'", str5, "Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found. not found." + "'", str7, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found. not found.");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.util.List<org.example.Customer> customerList16 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass17 = customerList16.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertNotNull(customerList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"\".", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (int) (short) 10);
        java.lang.String str11 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        int int13 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str15 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"\". not found.");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\". not found.");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass5 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "", 0);
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass13 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.", (double) '4');
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.", "Vehicle with ID hi! not found.");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found. not found.", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.String str16 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found.");
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID Vehicle with ID hi! not found. not found.", 100.0d);
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str6 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", (double) (byte) 1);
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass13 = vehicleList12.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str6, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"hi!\". not found.", (int) (short) 0);
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.", "Vehicle with ID hi! not found.");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found." + "'", str5, "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.util.List<org.example.Customer> customerList16 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(customerList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\". not found.");
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str12 = rentalSystem0.searchVehicle("");
        java.lang.String str16 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", 0);
        java.lang.String str18 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".", "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".", (double) (short) 1);
        int int24 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"\"." + "'", str12, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\"." + "'", str18, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str12 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".");
        java.lang.String str14 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        java.lang.String str16 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\"." + "'", str12, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\"." + "'", str14, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\"." + "'", str16, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "hi!", (int) (short) 100);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.", "No vehicles match the keyword \"\".");
        java.lang.Class<?> wildcardClass13 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.util.List<org.example.Vehicle> vehicleList16 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".", (double) 10L);
        java.lang.Class<?> wildcardClass23 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList16);
        org.junit.Assert.assertNotNull(vehicleList17);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass16 = customerList15.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        java.lang.String str12 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\". not found.");
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vehicleList11);
        org.junit.Assert.assertNotNull(customerList12);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.", (int) '4');
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.String str19 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found.", 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(customerList10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\". not found." + "'", str19, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\". not found.");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        java.lang.String str9 = rentalSystem0.searchVehicle("hi!");
        rentalSystem0.addCustomer("hi!", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str9, "No vehicles match the keyword \"hi!\".");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str19 = rentalSystem0.rentVehicle("No vehicles match the keyword \"hi!\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '#');
        java.lang.String str23 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".", (int) 'a');
        java.lang.Class<?> wildcardClass24 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID No vehicles match the keyword \"hi!\". not found." + "'", str19, "Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found." + "'", str23, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", 1.0d);
        java.lang.Class<?> wildcardClass10 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        java.lang.String str15 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        java.util.List<org.example.Vehicle> vehicleList16 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList16);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.rentVehicle("", "Vehicle with ID hi! not found.", (int) (short) 100);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vehicleList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.String str17 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".", "", (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\"." + "'", str17, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".");
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        rentalSystem0.addCustomer("No vehicles match the keyword \"hi!\".", "hi!");
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int15 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList16 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(customerList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.", 100);
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"\".");
        java.lang.String str10 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.", "Vehicle with ID  not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\"." + "'", str10, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) '4');
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList10 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(vehicleList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", 1.0d);
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".", (int) (short) 100);
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", "No vehicles match the keyword \"\".");
        java.lang.String str18 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\"." + "'", str18, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        int int16 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.", (double) 100L);
        java.lang.String str23 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\".");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found." + "'", str23, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList5 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass6 = customerList5.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(customerList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(vehicleList12);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.lang.String str5 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\"." + "'", str5, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".");
        org.junit.Assert.assertNotNull(vehicleList9);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.", "", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found. not found.", (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList18 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass20 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList17);
        org.junit.Assert.assertNotNull(customerList18);
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID hi! not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".\".", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID hi! not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "hi!", (int) (short) 100);
        java.lang.String str10 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".");
        java.lang.String str12 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.");
        int int13 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\"." + "'", str10, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\".");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\"." + "'", str12, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 10);
        int int24 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str26 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.\"." + "'", str26, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.\".");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList8 = rentalSystem0.getCustomers();
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".", (int) (short) 10);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(customerList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.");
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        rentalSystem0.addVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"\".", (double) (byte) 10);
        java.lang.String str17 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.rentVehicle("", "Vehicle with ID hi! not found.", (int) (short) 100);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str13 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".", 0);
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass5 = customerList4.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        int int16 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str20 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".", 100);
        java.util.List<org.example.Customer> customerList21 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass22 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", (double) 1.0f);
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(vehicleList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.");
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        rentalSystem0.addVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"\".", (double) (byte) 10);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", (int) (byte) -1);
        int int20 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList21 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass22 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(customerList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customer ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(vehicleList8);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.\". not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.String str14 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID  not found." + "'", str14, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList15);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str14 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.");
        java.lang.String str18 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.\".", (int) (short) 10);
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.\"." + "'", str14, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList19);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\".");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.\".", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", (int) (byte) -1);
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".");
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (int) (byte) 10);
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
        java.util.List<org.example.Customer> customerList21 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID  not found." + "'", str17, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\"." + "'", str20, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(customerList21);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        rentalSystem0.addCustomer("ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n", "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".");
        java.lang.String str10 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".", (int) (byte) 1);
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".", 100);
        int int15 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str9 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (int) (byte) 1);
        java.lang.String str11 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\".");
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found." + "'", str9, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        java.lang.String str19 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".");
        java.lang.Class<?> wildcardClass20 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".\"." + "'", str19, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".\".");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        rentalSystem0.addVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"\".", (double) (byte) 10);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", (int) (byte) -1);
        int int20 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList21 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass22 = customerList21.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(customerList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".", "No vehicles match the keyword \"\".", (double) 1);
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.util.List<org.example.Customer> customerList16 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.util.List<org.example.Customer> customerList19 = rentalSystem0.getCustomers();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".\".", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(customerList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        org.junit.Assert.assertNotNull(customerList19);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (short) 0);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found." + "'", str7, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList8);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.");
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList10 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass11 = vehicleList10.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(vehicleList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str5 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.");
        int int12 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str5, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found.");
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        java.lang.String str15 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        int int16 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.\".", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (short) 0);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found.", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.");
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(customerList10);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        rentalSystem0.addCustomer("ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n", "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".");
        java.lang.String str10 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".", (int) (byte) 1);
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".", 100);
        java.lang.String str18 = rentalSystem0.rentVehicle("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", (int) 'a');
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID  not found." + "'", str18, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.", (double) 10);
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        rentalSystem0.addVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"\".", (double) (byte) 10);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", (int) (byte) -1);
        int int20 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList21 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".\".", (double) (byte) 10);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(vehicleList21);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList18 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        java.lang.String str23 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".", (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".", "", (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList17);
        org.junit.Assert.assertNotNull(customerList18);
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found. not found." + "'", str23, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found. not found.");
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList20 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.lang.String str10 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".");
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass13 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\"." + "'", str10, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        org.junit.Assert.assertNotNull(vehicleList11);
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str19 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".\".", 2);
        int int20 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\". not found." + "'", str19, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("No vehicles match the keyword \"hi!\".");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList10 = rentalSystem0.getVehicles();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\"." + "'", str8, "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(vehicleList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\". not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\". not found. not found.");
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "", 0);
        int int12 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass13 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.util.List<org.example.Customer> customerList16 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.util.List<org.example.Customer> customerList19 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".\". not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(customerList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        org.junit.Assert.assertNotNull(customerList19);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass13 = vehicleList12.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".");
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "Vehicle with ID Vehicle with ID  not found. not found.", 100);
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str6 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        java.lang.String str10 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.", (int) (short) 0);
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        java.lang.String str14 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.");
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found." + "'", str6, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\"." + "'", str14, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID  not found.", (double) 10);
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".", 100.0d);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.", (int) (short) 1);
        java.util.List<org.example.Customer> customerList20 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass21 = customerList20.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        java.util.List<org.example.Customer> customerList19 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.\".", "", (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(customerList19);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) '4');
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass13 = vehicleList12.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".", 1.0d);
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".\".", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID  not found." + "'", str13, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        java.lang.String str15 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.\".", (double) (byte) 100);
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.", (int) '#');
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.");
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str6 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        java.lang.String str10 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.", (int) (short) 0);
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str15 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\".", (int) (byte) 10);
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found." + "'", str6, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".");
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "Vehicle with ID Vehicle with ID  not found. not found.", 100);
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".\".", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.", (double) (short) 1);
        java.util.List<org.example.Customer> customerList19 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList19);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.lang.String str20 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".");
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\"." + "'", str20, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\".");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        rentalSystem0.addVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"\".", (double) (byte) 10);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", (int) (byte) -1);
        int int20 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", (int) (short) 1);
        java.lang.Class<?> wildcardClass20 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str9 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (int) (byte) 1);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        java.lang.String str16 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.", "Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.", (int) (short) 100);
        int int17 = rentalSystem0.getAvailableVehicleCount();
        int int18 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found." + "'", str9, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        java.lang.String str21 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID hi! not found.\".\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", (double) 100);
        java.util.List<org.example.Vehicle> vehicleList30 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\"." + "'", str21, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList30);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        int int11 = rentalSystem0.getAvailableVehicleCount();
        int int12 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(customerList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 10);
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.", 1.0d);
        java.lang.String str32 = rentalSystem0.rentVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".", (int) '#');
        java.lang.Class<?> wildcardClass33 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found." + "'", str32, "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) '4');
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList10 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass12 = customerList11.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(vehicleList10);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".");
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Customer> customerList13 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(customerList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList8 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass9 = customerList8.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertNotNull(customerList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 10);
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.", 1.0d);
        int int29 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass30 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found. not found.");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.lang.String str10 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".");
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\"." + "'", str10, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.String str14 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("No vehicles match the keyword \"hi!\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\". not found.", (double) 0.0f);
        java.util.List<org.example.Customer> customerList20 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass21 = customerList20.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID  not found." + "'", str14, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        java.lang.String str19 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found. not found.");
        int int20 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found. not found.\"." + "'", str19, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        int int13 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.String str16 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".\"." + "'", str16, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".\".");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str7 = rentalSystem0.searchVehicle("");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"\"." + "'", str7, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".\". not found.");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.lang.String str20 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".");
        java.util.List<org.example.Vehicle> vehicleList21 = rentalSystem0.getVehicles();
        java.lang.String str23 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\"." + "'", str20, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\".");
        org.junit.Assert.assertNotNull(vehicleList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.\"." + "'", str23, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.\".");
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        int int12 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found. not found. not found.", "", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID hi! not found.\".\".", (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"\".", "hi!", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.\". not found.", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(customerList10);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found.");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".", (double) 0.0f);
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (double) '4');
        java.util.List<org.example.Vehicle> vehicleList21 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\". not found. not found.", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertNotNull(vehicleList21);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.", "", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found.", 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", 1.0d);
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(vehicleList11);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 10);
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.", 1.0d);
        java.lang.Class<?> wildcardClass29 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str13 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", (int) (short) 10);
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".", (int) (byte) 100);
        java.util.List<org.example.Customer> customerList18 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass19 = customerList18.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.");
        org.junit.Assert.assertNotNull(customerList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.searchVehicle("Vehicle with ID hi! not found.");
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.");
        java.util.List<org.example.Customer> customerList13 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass14 = customerList13.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"Vehicle with ID hi! not found.\"." + "'", str10, "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".\".\"." + "'", str16, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".\".\".");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str7, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList3 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\". not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.\".\".", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(vehicleList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found." + "'", str5, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found.");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass9 = vehicleList8.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str7, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID Vehicle with ID hi! not found. not found.", 100.0d);
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        java.lang.String str22 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\".");
        java.lang.Class<?> wildcardClass23 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\". not found." + "'", str22, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"hi!\".", (double) 1L);
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", (int) '4');
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\".", (double) 100.0f);
        java.util.List<org.example.Customer> customerList23 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass24 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertNotNull(customerList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".", (double) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\". not found. not found.", "", (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found. not found.");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(customerList10);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.util.List<org.example.Customer> customerList16 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.lang.String str20 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(customerList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\"." + "'", str20, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".", (int) (short) 100);
        java.util.List<org.example.Vehicle> vehicleList20 = rentalSystem0.getVehicles();
        java.lang.String str22 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        java.lang.String str26 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (int) '4');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str22, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found. not found." + "'", str26, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found. not found.");
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\"." + "'", str5, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (short) 0);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("ID: Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found., Model: Vehicle with ID Vehicle with ID hi! not found. not found., Type: No vehicles match the keyword \"hi!\"., Daily Rate: $1.0, Status: Available\nID: Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found., Model: No vehicles match the keyword \"\"., Type: No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\"., Daily Rate: $100.0, Status: Available\n", "", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found.", (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList13 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID hi! not found.\".\".", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found. not found.", (double) 100.0f);
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertNotNull(vehicleList13);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) 'a');
        java.lang.String str21 = rentalSystem0.searchVehicle("No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\"." + "'", str21, "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        int int6 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str8 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass10 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\"." + "'", str8, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList5 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass7 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(customerList5);
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".", (int) (short) 100);
        java.util.List<org.example.Vehicle> vehicleList20 = rentalSystem0.getVehicles();
        java.lang.String str22 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found.");
        java.lang.Class<?> wildcardClass23 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found. not found." + "'", str22, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str10 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".");
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.String str16 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".\".", 10);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found. not found.", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList11);
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found. not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".\". not found. not found. not found.");
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", (int) (byte) -1);
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.");
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        int int12 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\". not found. not found.\".", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.String str16 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        java.util.List<org.example.Customer> customerList17 = rentalSystem0.getCustomers();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", "No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\"." + "'", str16, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".");
        org.junit.Assert.assertNotNull(customerList17);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        java.lang.String str21 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        java.util.List<org.example.Customer> customerList25 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass26 = customerList25.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\"." + "'", str21, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".");
        org.junit.Assert.assertNotNull(customerList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", (int) (byte) -1);
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found. not found.", "hi!", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.", 0.0d);
        java.util.List<org.example.Vehicle> vehicleList26 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass27 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList18 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        int int20 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList17);
        org.junit.Assert.assertNotNull(customerList18);
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"hi!\".", (double) 1L);
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", (int) '4');
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\".", (double) 100.0f);
        int int23 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str25 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found. not found.\"." + "'", str25, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found. not found.\".");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".", (double) 0L);
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass13 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.", "Vehicle with ID ID: Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found., Model: Vehicle with ID Vehicle with ID hi! not found. not found., Type: No vehicles match the keyword \"hi!\"., Daily Rate: $1.0, Status: Available\nID: Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found., Model: No vehicles match the keyword \"\"., Type: No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\"., Daily Rate: $100.0, Status: Available\n not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\". not found.", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(vehicleList6);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) (short) 0);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass10 = vehicleList9.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        java.lang.String str12 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.");
        int int13 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str15 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\"." + "'", str12, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".\".\"." + "'", str15, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".\".\".");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        java.lang.String str14 = rentalSystem0.rentVehicle("No vehicles match the keyword \"hi!\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.", 10);
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        int int16 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"hi!\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".", "No vehicles match the keyword \"\".", (double) 1);
        int int8 = rentalSystem0.getAvailableVehicleCount();
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass10 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str10 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".");
        java.lang.String str12 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".");
        java.lang.String str16 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\".", 2);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\"." + "'", str12, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.");
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.");
        java.lang.String str14 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.");
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\"." + "'", str12, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\".");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"\".");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.", "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".", (double) (byte) 100);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList8 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass9 = customerList8.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(customerList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found.");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList17);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.lang.String str4 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", 100);
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found." + "'", str4, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList9);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) '4');
        java.lang.String str10 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".");
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        int int6 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.");
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.\". not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".\". not found.", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found.");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str12 = rentalSystem0.searchVehicle("");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        java.lang.String str17 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".");
        java.lang.String str19 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"\"." + "'", str12, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\"." + "'", str19, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"\".");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", (double) 100.0f);
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.String str17 = rentalSystem0.returnVehicle("No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\". not found.");
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        rentalSystem0.addVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"\".", (double) (byte) 10);
        java.lang.String str17 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\". not found.\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.", 0.0d);
        java.lang.Class<?> wildcardClass24 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str14 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        java.lang.String str16 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\"." + "'", str14, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\"." + "'", str16, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"hi!\".", (double) 1L);
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", (int) '4');
        int int18 = rentalSystem0.getAvailableVehicleCount();
        int int19 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\". not found.", "", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\". not found. not found.", (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".", 100.0d);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.", (int) (short) 1);
        java.util.List<org.example.Customer> customerList20 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass21 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".", (int) (byte) 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        int int12 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str14 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\".");
        java.lang.String str19 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.");
        java.lang.Class<?> wildcardClass20 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".\"." + "'", str14, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"\".");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", (double) 100.0f);
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass16 = customerList15.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".\".", "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n", 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\". not found. not found.", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"\".");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", (double) 100.0f);
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) '4');
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList10 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass13 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(vehicleList10);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(vehicleList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".\".\".\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".");
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "Vehicle with ID Vehicle with ID  not found. not found.", 100);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        java.lang.String str14 = rentalSystem0.searchVehicle("");
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"\"." + "'", str14, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle is already available.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.", 0);
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle is already available. not found." + "'", str11, "Vehicle with ID Vehicle is already available. not found.");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) 100.0f);
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.", (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.", "", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(customerList11);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.\".", (int) (byte) 1);
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\". not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str16 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.", (int) 'a');
        java.lang.String str20 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", (int) (byte) -1);
        int int21 = rentalSystem0.getAvailableVehicleCount();
        int int22 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str24 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".\"." + "'", str24, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".\".");
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found. not found. not found.\".", (int) '#');
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\". not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\". not found. not found.");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        int int15 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (int) (byte) 10);
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.");
        java.lang.String str24 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\".", 2);
        java.lang.Class<?> wildcardClass25 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID  not found." + "'", str17, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\"." + "'", str20, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found." + "'", str24, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 100);
        java.lang.String str11 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.\".");
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(customerList12);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", (int) (byte) -1);
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.");
        java.lang.String str22 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\". not found. not found." + "'", str22, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\". not found. not found.");
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str8 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        rentalSystem0.addVehicle("ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"\".", (double) (byte) 10);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", (int) (byte) -1);
        java.lang.String str23 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\".", (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID hi! not found." + "'", str8, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found." + "'", str23, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass10 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.rentVehicle("", "Vehicle with ID hi! not found.", (int) (short) 100);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (double) 10);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.String str16 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.");
        java.util.List<org.example.Customer> customerList17 = rentalSystem0.getCustomers();
        int int18 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        int int15 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found.", (int) (short) 0);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", "", (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList14);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".", (double) (short) 100);
        java.util.List<org.example.Customer> customerList18 = rentalSystem0.getCustomers();
        java.lang.String str20 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found.");
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".\". not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found. not found. not found.\".", (double) '4');
        java.lang.String str29 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found.", (int) (byte) 10);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(customerList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found. not found." + "'", str20, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found. not found. not found." + "'", str29, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found. not found. not found.");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        int int6 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\". not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".", (double) (short) 100);
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertNotNull(vehicleList19);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertNotNull(vehicleList15);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.", "Vehicle with ID hi! not found.");
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".", (double) 1.0f);
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found.", 0.0d);
        java.lang.String str29 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\". not found. not found. not found.\"." + "'", str29, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\". not found. not found. not found.\".");
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"\".", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (int) (short) 10);
        java.lang.String str13 = rentalSystem0.rentVehicle("No vehicles match the keyword \"\".", "", (-1));
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertNotNull(vehicleList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\". not found. not found.");
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found.");
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\". not found. not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\". not found. not found.\".");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) 100.0f);
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("");
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".", (-1));
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found. not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"\"." + "'", str7, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertNotNull(vehicleList8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (double) '4');
        int int21 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str23 = rentalSystem0.returnVehicle("");
        java.lang.String str25 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.");
        int int26 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"." + "'", str13, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID  not found." + "'", str23, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found. not found." + "'", str25, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass13 = customerList12.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        int int11 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(customerList12);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\".");
        java.lang.Class<?> wildcardClass10 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        java.lang.String str6 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Customer> customerList7 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".\".\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.", (double) 1);
        java.lang.String str17 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".");
        java.lang.Class<?> wildcardClass18 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str6, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList7);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("No vehicles match the keyword \"hi!\".");
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.", (int) '4');
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID No vehicles match the keyword \"hi!\". not found." + "'", str5, "Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\". not found.");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str13 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", (int) (short) 10);
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".", (int) (byte) 100);
        int int18 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"hi!\".", (double) 1L);
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", (int) '4');
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\".", (double) 100.0f);
        java.lang.String str26 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".", 10);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.\".", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found." + "'", str26, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("hi!", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) '4');
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass15 = vehicleList14.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID hi! not found." + "'", str13, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\".");
        int int15 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str17 = rentalSystem0.searchVehicle("Vehicle with ID hi! not found.");
        int int18 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\"." + "'", str10, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"Vehicle with ID hi! not found.\"." + "'", str17, "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"\".", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (int) (short) 10);
        java.lang.String str13 = rentalSystem0.rentVehicle("No vehicles match the keyword \"\".", "", (-1));
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"\". not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"hi!\".", (double) 1L);
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\". not found.");
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList13 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(vehicleList13);
        org.junit.Assert.assertNotNull(vehicleList17);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) 100.0f);
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found. not found.", "", 0);
        java.lang.Class<?> wildcardClass15 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found. not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\". not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".", (double) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("Vehicle with ID  not found.", "Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.\".", (double) 100L);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(vehicleList18);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList5 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass6 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(customerList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.lang.String str4 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Customer> customerList5 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\".");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str4, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(customerList5);
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\".\"." + "'", str8, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\".\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\". not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\". not found. not found.");
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        java.lang.String str5 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\"." + "'", str5, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str12 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".");
        java.lang.String str14 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\"." + "'", str12, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\"." + "'", str14, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.String str13 = rentalSystem0.searchVehicle("");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"\"." + "'", str13, "No vehicles match the keyword \"\".");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        java.lang.String str21 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.util.List<org.example.Vehicle> vehicleList22 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found.");
        java.lang.Class<?> wildcardClass26 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\"." + "'", str21, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList22);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        rentalSystem0.addCustomer("No vehicles match the keyword \"hi!\".", "hi!");
        java.util.List<org.example.Vehicle> vehicleList13 = rentalSystem0.getVehicles();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList13);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", (int) (short) -1);
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        java.lang.String str15 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) (short) 100);
        int int16 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str7 = rentalSystem0.searchVehicle("");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", (int) (byte) 100);
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"\"." + "'", str7, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\". not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\". not found.\".");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("No vehicles match the keyword \"hi!\".");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID  not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\". not found.", (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\".\".", "", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found. not found. not found.", (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\"." + "'", str8, "No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID  not found. not found.");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "hi!", (int) (short) 100);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", "No vehicles match the keyword \"\".", (int) (byte) -1);
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.", (double) 10);
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str9 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (int) (byte) 1);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"\".", "Vehicle with ID  not found.", (double) 1L);
        java.lang.String str16 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".");
        rentalSystem0.addVehicle("hi!", "No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".", "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", (double) 3);
        java.lang.String str27 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".", (int) (byte) 100);
        java.util.List<org.example.Customer> customerList28 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\". not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found." + "'", str9, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.\"." + "'", str16, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found." + "'", str27, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList28);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("");
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID  not found." + "'", str13, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        java.lang.String str15 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) (short) 100);
        java.lang.String str19 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".", 0);
        int int20 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList21 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList22 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass23 = vehicleList22.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID  not found." + "'", str8, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found. not found." + "'", str19, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(customerList21);
        org.junit.Assert.assertNotNull(vehicleList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (int) (byte) 10);
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.returnVehicle("");
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass19 = vehicleList18.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID  not found." + "'", str17, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".", 1.0d);
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".\". not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found. not found.\".", (double) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Vehicle ID cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID  not found." + "'", str13, "Vehicle with ID  not found.");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".", (double) 2);
        java.lang.String str17 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found. not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.\".\".", "", (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\"." + "'", str17, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) '4');
        java.lang.String str10 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".");
        java.util.List<org.example.Vehicle> vehicleList11 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"\". not found.");
        java.lang.Class<?> wildcardClass9 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".");
        java.lang.Class<?> wildcardClass10 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str12 = rentalSystem0.searchVehicle("");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        java.lang.String str17 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".");
        java.lang.String str19 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"\"." + "'", str12, "No vehicles match the keyword \"\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found." + "'", str19, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\". not found.");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        java.lang.String str14 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        java.lang.String str19 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.");
        java.lang.String str21 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.");
        java.lang.String str23 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str14, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\"." + "'", str17, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\"." + "'", str19, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\"." + "'", str21, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found." + "'", str23, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found.");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        java.lang.String str21 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\".");
        int int22 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str24 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".");
        java.lang.Class<?> wildcardClass25 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\". not found." + "'", str21, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".\"." + "'", str24, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".\".");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".", "hi!");
        java.lang.String str15 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".", (int) 'a');
        java.lang.String str17 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (double) 0);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found." + "'", str15, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".\"." + "'", str17, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".\".");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList13 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".\".\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        java.lang.String str18 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found. not found.");
        java.lang.Class<?> wildcardClass19 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertNotNull(vehicleList13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found. not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", 1.0d);
        java.lang.String str14 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found. not found. not found.", "Vehicle with ID ID: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Model: No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"., Type: No vehicles match the keyword \"Vehicle with ID hi! not found.\"., Daily Rate: $100.0, Status: Available\n not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found. not found.", (double) '4');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n" + "'", str14, "ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n");
        org.junit.Assert.assertNotNull(customerList15);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass12 = customerList11.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        rentalSystem0.addVehicle("Vehicle with ID  not found.", "Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", (double) '4');
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str11 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\".");
        java.lang.Class<?> wildcardClass12 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\". not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.", (double) 100L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\". not found.");
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.returnVehicle("hi!");
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n", (int) (short) -1);
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        int int18 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.", (double) 100.0f);
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found. not found.\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".\".", 0.0d);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID hi! not found." + "'", str10, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Customer> customerList5 = rentalSystem0.getCustomers();
        java.lang.String str7 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.");
        java.lang.String str9 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(customerList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\"." + "'", str7, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".\"." + "'", str9, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".\".");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.\".");
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "No vehicles match the keyword \"\".");
        java.lang.String str10 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        java.lang.String str12 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.");
        java.lang.String str16 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found. not found.", 0);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str5, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\"." + "'", str10, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\"." + "'", str12, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found. not found. not found." + "'", str16, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found. not found. not found.");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".");
        java.lang.String str11 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\".");
        java.lang.String str15 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID  not found.\".\".\". not found.", (int) (short) 1);
        java.util.List<org.example.Vehicle> vehicleList16 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass17 = vehicleList16.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found.");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Vehicle> vehicleList14 = rentalSystem0.getVehicles();
        java.lang.String str16 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.");
        java.util.List<org.example.Customer> customerList17 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass18 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(vehicleList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\"." + "'", str16, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".");
        org.junit.Assert.assertNotNull(customerList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str10 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\". not found.");
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("Vehicle with ID  not found.", "Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.util.List<org.example.Customer> customerList18 = rentalSystem0.getCustomers();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addCustomer("", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".\".");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(customerList18);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.", (int) (short) -1);
        java.util.List<org.example.Vehicle> vehicleList19 = rentalSystem0.getVehicles();
        java.lang.String str21 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        java.util.List<org.example.Customer> customerList25 = rentalSystem0.getCustomers();
        java.lang.String str27 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found.\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\"." + "'", str21, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".");
        org.junit.Assert.assertNotNull(customerList25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found.\". not found." + "'", str27, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.\".\". not found.\". not found.");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "hi!", (int) (short) 100);
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList10 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(vehicleList10);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        int int19 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str23 = rentalSystem0.rentVehicle("ID: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Model: No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"., Type: No vehicles match the keyword \"Vehicle with ID hi! not found.\"., Daily Rate: $100.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".", 0);
        int int24 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID ID: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Model: No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"., Type: No vehicles match the keyword \"Vehicle with ID hi! not found.\"., Daily Rate: $100.0, Status: Available\n not found." + "'", str23, "Vehicle with ID ID: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Model: No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"., Type: No vehicles match the keyword \"Vehicle with ID hi! not found.\"., Daily Rate: $100.0, Status: Available\n not found.");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str12 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".");
        java.lang.String str14 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\"." + "'", str12, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\"." + "'", str14, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.", "Vehicle with ID hi! not found.", (int) '#');
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\". not found.", "hi!");
        java.lang.String str19 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\".\".", (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.\". not found." + "'", str19, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.\". not found.");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.", "Vehicle with ID hi! not found.", (int) '#');
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        int int6 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str10 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".\".", (int) (short) 10);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found." + "'", str10, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found.");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        int int14 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("hi!");
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".", (double) 10L);
        java.util.List<org.example.Vehicle> vehicleList13 = rentalSystem0.getVehicles();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str7, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList13);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found. not found.", 100);
        java.lang.Class<?> wildcardClass14 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        java.lang.String str11 = rentalSystem0.returnVehicle("");
        int int12 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\".", "Vehicle with ID  not found.", "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.", (double) 1);
        java.lang.Class<?> wildcardClass18 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID  not found." + "'", str11, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        rentalSystem0.addCustomer("No vehicles match the keyword \"hi!\".", "hi!");
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        int int18 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".", "ID: Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found., Model: Vehicle with ID Vehicle with ID hi! not found. not found., Type: No vehicles match the keyword \"hi!\"., Daily Rate: $1.0, Status: Available\nID: Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found., Model: No vehicles match the keyword \"\"., Type: No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\"., Daily Rate: $100.0, Status: Available\n", "", (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found." + "'", str17, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        java.lang.String str17 = rentalSystem0.rentVehicle("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.", 0);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".", "No vehicles match the keyword \"\".");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.", "", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Model cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID  not found." + "'", str17, "Vehicle with ID  not found.");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 10);
        java.lang.String str25 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.", (double) 'a');
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found." + "'", str25, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        java.lang.String str18 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\".\".", (int) (short) 0);
        java.util.List<org.example.Customer> customerList19 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.");
        java.lang.Class<?> wildcardClass23 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found. not found." + "'", str18, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList19);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList8 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found." + "'", str7, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList8);
        org.junit.Assert.assertNotNull(vehicleList9);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\". not found.\".");
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.");
        java.lang.Class<?> wildcardClass11 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\". not found.\". not found." + "'", str8, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found.\". not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str10 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found.", (double) 0L);
        java.lang.String str20 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found. not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\".", 1);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found." + "'", str10, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found. not found. not found.\". not found." + "'", str20, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found. not found. not found.\". not found.");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "hi!", (int) (short) 100);
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found.", "No vehicles match the keyword \"\".", (int) (byte) -1);
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found. not found.", (double) 10);
        java.lang.String str20 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".");
        int int21 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".\"." + "'", str20, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".\".");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\". not found.\".", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        java.lang.String str14 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.\". not found. not found. not found.", "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.\"." + "'", str14, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\". not found.\".");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        int int9 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        int int19 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str23 = rentalSystem0.rentVehicle("ID: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Model: No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"., Type: No vehicles match the keyword \"Vehicle with ID hi! not found.\"., Daily Rate: $100.0, Status: Available\n", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".", 0);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\".\". not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID ID: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Model: No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"., Type: No vehicles match the keyword \"Vehicle with ID hi! not found.\"., Daily Rate: $100.0, Status: Available\n not found." + "'", str23, "Vehicle with ID ID: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Model: No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\"., Type: No vehicles match the keyword \"Vehicle with ID hi! not found.\"., Daily Rate: $100.0, Status: Available\n not found.");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        java.util.List<org.example.Customer> customerList19 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.");
        java.lang.Class<?> wildcardClass23 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\"." + "'", str18, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".");
        org.junit.Assert.assertNotNull(customerList19);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str12 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID  not found. not found.");
        java.lang.String str14 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.");
        java.util.List<org.example.Customer> customerList15 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass16 = customerList15.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\"." + "'", str14, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".");
        org.junit.Assert.assertNotNull(customerList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList7 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass8 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(customerList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass7 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        java.lang.String str14 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.lang.String str17 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.");
        java.lang.String str19 = rentalSystem0.searchVehicle("Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\". not found. not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str14, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\"." + "'", str17, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\".");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\". not found. not found. not found.\"." + "'", str19, "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\". not found. not found. not found.\".");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (double) (byte) 10);
        rentalSystem0.addVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found.", 1.0d);
        int int29 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str31 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\". not found. not found. not found." + "'", str31, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.\". not found. not found. not found.");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str9 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", (int) (byte) 1);
        java.lang.String str11 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".\". not found.");
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        java.lang.Class<?> wildcardClass13 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found." + "'", str9, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".\". not found.\"." + "'", str11, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.\".\". not found.\".");
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID  not found.\".", "hi!");
        int int10 = rentalSystem0.getAvailableVehicleCount();
        int int11 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found. not found. not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".", (double) (short) 100);
        int int18 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("hi!");
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        int int5 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"\".", "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", (int) (short) 10);
        java.lang.String str13 = rentalSystem0.rentVehicle("No vehicles match the keyword \"\".", "", (-1));
        int int14 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str16 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
        java.util.List<org.example.Vehicle> vehicleList17 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList18 = rentalSystem0.getCustomers();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found. not found.\".");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID hi! not found." + "'", str3, "Vehicle with ID hi! not found.");
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"\". not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found." + "'", str16, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.");
        org.junit.Assert.assertNotNull(vehicleList17);
        org.junit.Assert.assertNotNull(customerList18);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        java.lang.String str12 = rentalSystem0.rentVehicle("Vehicle with ID hi! not found.", "Vehicle with ID Vehicle with ID  not found. not found.", (int) (byte) 10);
        java.lang.String str14 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        int int15 = rentalSystem0.getAvailableVehicleCount();
        java.lang.Class<?> wildcardClass16 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID  not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID Vehicle with ID hi! not found. not found." + "'", str12, "Vehicle with ID Vehicle with ID hi! not found. not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str14, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        java.lang.String str17 = rentalSystem0.rentVehicle("", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.", 0);
        java.lang.String str21 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\".", "Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.", (int) (byte) 10);
        java.lang.Class<?> wildcardClass22 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID  not found." + "'", str17, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\". not found." + "'", str21, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        java.lang.String str10 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.\".");
        int int15 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str17 = rentalSystem0.searchVehicle("Vehicle with ID hi! not found.");
        java.lang.String str19 = rentalSystem0.searchVehicle("No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".\".\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\"." + "'", str10, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\".");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "No vehicles match the keyword \"Vehicle with ID hi! not found.\"." + "'", str17, "No vehicles match the keyword \"Vehicle with ID hi! not found.\".");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".\".\".\"." + "'", str19, "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"ID: Vehicle with ID  not found., Model: Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found., Type: No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\"., Daily Rate: $1.0, Status: Available\n\".\".\".\".");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.", "hi!", (int) (short) 100);
        java.lang.String str10 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".");
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\". not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\". not found.", (double) (short) 100);
        int int17 = rentalSystem0.getAvailableVehicleCount();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\"." + "'", str10, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".\".");
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList4 = rentalSystem0.getVehicles();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "hi!");
        java.lang.String str11 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", (int) '4');
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        java.util.List<org.example.Customer> customerList14 = rentalSystem0.getCustomers();
        int int15 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\".\". not found.", (double) 1);
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found. not found.");
        java.lang.Class<?> wildcardClass24 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(vehicleList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found." + "'", str11, "Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found. not found.");
        org.junit.Assert.assertNotNull(customerList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        rentalSystem0.addCustomer("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        java.lang.String str17 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\".");
        java.util.List<org.example.Vehicle> vehicleList18 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass19 = vehicleList18.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"\". not found.\". not found.\". not found.");
        org.junit.Assert.assertNotNull(vehicleList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        rentalSystem0.addCustomer("Vehicle with ID hi! not found.", "hi!");
        java.lang.String str18 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        rentalSystem0.addCustomer("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\".");
        java.lang.String str23 = rentalSystem0.returnVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\". not found.");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\".\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".\".");
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str18, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\". not found. not found." + "'", str23, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\". not found. not found.");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        java.lang.String str8 = rentalSystem0.searchVehicle("Vehicle with ID  not found.");
        rentalSystem0.addVehicle("hi!", "Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID hi! not found.", (double) 0);
        java.lang.String str15 = rentalSystem0.returnVehicle("Vehicle with ID  not found.");
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\".\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found. not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\". not found.", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Daily rate cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No vehicles match the keyword \"Vehicle with ID  not found.\"." + "'", str8, "No vehicles match the keyword \"Vehicle with ID  not found.\".");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vehicle with ID Vehicle with ID  not found. not found." + "'", str15, "Vehicle with ID Vehicle with ID  not found. not found.");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.lang.String str8 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.", 100);
        java.lang.String str12 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID  not found.\".", "Vehicle with ID Vehicle with ID hi! not found. not found.", (int) (short) -1);
        java.lang.String str14 = rentalSystem0.searchVehicle("hi!");
        java.util.List<org.example.Vehicle> vehicleList15 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList16 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str8, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found." + "'", str12, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str14, "No vehicles match the keyword \"hi!\".");
        org.junit.Assert.assertNotNull(vehicleList15);
        org.junit.Assert.assertNotNull(vehicleList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        int int7 = rentalSystem0.getAvailableVehicleCount();
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList11 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList12 = rentalSystem0.getVehicles();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(customerList9);
        org.junit.Assert.assertNotNull(customerList10);
        org.junit.Assert.assertNotNull(customerList11);
        org.junit.Assert.assertNotNull(vehicleList12);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.");
        java.lang.String str14 = rentalSystem0.rentVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found.", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found. not found.", 0);
        java.lang.String str16 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\". not found.");
        rentalSystem0.addVehicle("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found. not found. not found. not found. not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found. not found. not found.\". not found. not found.\".\".", "Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID hi! not found. not found. not found. not found. not found. not found.", (double) 3);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found." + "'", str14, "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found.");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\". not found.\"." + "'", str16, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\". not found.\".");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.lang.String str7 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".");
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID  not found. not found.", "Vehicle with ID  not found.");
        int int11 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str13 = rentalSystem0.returnVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found. not found.\". not found.", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found. not found.\". not found. not found.");
        int int17 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str21 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found. not found. not found.\".\".\". not found.", (int) (short) -1);
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\"." + "'", str7, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found." + "'", str13, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found." + "'", str21, "Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.");
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.util.List<org.example.Vehicle> vehicleList2 = rentalSystem0.getVehicles();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.util.List<org.example.Customer> customerList4 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID  not found.\".", (int) ' ');
        java.lang.String str13 = rentalSystem0.rentVehicle("Vehicle with ID Vehicle with ID  not found. not found.", "", (int) (byte) -1);
        int int14 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addCustomer("Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.", "Vehicle with ID hi! not found.");
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\". not found.", "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\". not found.", "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\".", (double) 1.0f);
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"\". not found. not found. not found.\".\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID hi! not found. not found.\". not found. not found. not found.\". not found.\".", "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\". not found.", 0.0d);
        java.lang.String str29 = rentalSystem0.searchVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.\".");
        java.util.List<org.example.Vehicle> vehicleList30 = rentalSystem0.getVehicles();
        java.lang.Class<?> wildcardClass31 = vehicleList30.getClass();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertNotNull(vehicleList2);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertNotNull(customerList4);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.\".\"." + "'", str29, "No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found. not found.\".\".");
        org.junit.Assert.assertNotNull(vehicleList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList3 = rentalSystem0.getCustomers();
        java.lang.String str5 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\".");
        java.lang.String str9 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.\".", 0);
        java.util.List<org.example.Customer> customerList10 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(customerList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found." + "'", str5, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID  not found. not found. not found. not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found." + "'", str9, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found.");
        org.junit.Assert.assertNotNull(customerList10);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        rentalSystem0.addCustomer("hi!", "Vehicle with ID Vehicle with ID  not found. not found.");
        java.util.List<org.example.Vehicle> vehicleList9 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.returnVehicle("No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\".");
        java.lang.String str13 = rentalSystem0.returnVehicle("Vehicle with ID Vehicle is already available. not found.");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vehicle with ID Vehicle with ID Vehicle is already available. not found. not found." + "'", str13, "Vehicle with ID Vehicle with ID Vehicle is already available. not found. not found.");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "hi!", 10);
        java.util.List<org.example.Vehicle> vehicleList6 = rentalSystem0.getVehicles();
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found.", "Vehicle with ID Vehicle with ID hi! not found. not found.", "No vehicles match the keyword \"hi!\".", (double) 1L);
        java.lang.String str13 = rentalSystem0.searchVehicle("Vehicle with ID No vehicles match the keyword \"hi!\". not found.");
        java.lang.String str17 = rentalSystem0.rentVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\". not found. not found.", (int) '4');
        rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found. not found.\". not found.", "No vehicles match the keyword \"\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found.\".\". not found.\".", (double) 100.0f);
        int int23 = rentalSystem0.getAvailableVehicleCount();
        // The following exception was thrown during execution in test generation
        try {
            rentalSystem0.addVehicle("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID Vehicle with ID Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found. not found. not found.\".\". not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID No vehicles match the keyword \"hi!\". not found. not found.\". not found.\".", "", (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Type cannot be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(vehicleList6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\"." + "'", str13, "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"hi!\". not found.\".");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found." + "'", str17, "Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\". not found.");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str3 = rentalSystem0.returnVehicle("");
        int int4 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Vehicle> vehicleList5 = rentalSystem0.getVehicles();
        java.lang.String str7 = rentalSystem0.searchVehicle("hi!");
        rentalSystem0.addCustomer("Vehicle with ID No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"hi!\".\".\".\". not found.", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID ID: Vehicle with ID  not found., Model: Vehicle with ID hi! not found., Type: Vehicle with ID Vehicle with ID hi! not found. not found., Daily Rate: $52.0, Status: Available\n not found. not found.\". not found.\".");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vehicle with ID  not found." + "'", str3, "Vehicle with ID  not found.");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(vehicleList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "No vehicles match the keyword \"hi!\"." + "'", str7, "No vehicles match the keyword \"hi!\".");
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        java.util.List<org.example.Vehicle> vehicleList1 = rentalSystem0.getVehicles();
        int int2 = rentalSystem0.getAvailableVehicleCount();
        rentalSystem0.addVehicle("No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".\".", "No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.\".", "No vehicles match the keyword \"\".", (double) 1);
        int int8 = rentalSystem0.getAvailableVehicleCount();
        java.util.List<org.example.Customer> customerList9 = rentalSystem0.getCustomers();
        org.junit.Assert.assertNotNull(vehicleList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(customerList9);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.example.RentalSystem rentalSystem0 = new org.example.RentalSystem();
        int int1 = rentalSystem0.getAvailableVehicleCount();
        java.lang.String str5 = rentalSystem0.rentVehicle("", "Vehicle with ID  not found.", 100);
        java.util.List<org.example.Customer> customerList6 = rentalSystem0.getCustomers();
        java.util.List<org.example.Vehicle> vehicleList7 = rentalSystem0.getVehicles();
        java.lang.String str11 = rentalSystem0.rentVehicle("No vehicles match the keyword \"Vehicle with ID hi! not found.\".", "Vehicle with ID Vehicle with ID No vehicles match the keyword \"Vehicle with ID Vehicle with ID  not found. not found.\". not found. not found.", (int) (byte) 100);
        java.util.List<org.example.Customer> customerList12 = rentalSystem0.getCustomers();
        java.lang.String str16 = rentalSystem0.rentVehicle("", "No vehicles match the keyword \"No vehicles match the keyword \"No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID No vehicles match the keyword \"Vehicle with ID  not found.\". not found.\". not found.\". not found.\".\".\".", 1);
        java.lang.Class<?> wildcardClass17 = rentalSystem0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Vehicle with ID  not found." + "'", str5, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(customerList6);
        org.junit.Assert.assertNotNull(vehicleList7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found." + "'", str11, "Vehicle with ID No vehicles match the keyword \"Vehicle with ID hi! not found.\". not found.");
        org.junit.Assert.assertNotNull(customerList12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Vehicle with ID  not found." + "'", str16, "Vehicle with ID  not found.");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }
}

